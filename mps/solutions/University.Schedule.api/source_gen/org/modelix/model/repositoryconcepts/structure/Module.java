package org.modelix.model.repositoryconcepts.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import org.modelix.mps.apigen.runtime.INodeHolder;
import org.jetbrains.annotations.NotNull;
import org.modelix.model.api.INode;
import org.jetbrains.annotations.Nullable;
import org.modelix.mps.apigen.runtime.AbstractConcept;
import java.util.stream.StreamSupport;
import org.modelix.mps.apigen.runtime.MPSLanguageRegistry;
import java.util.List;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * Generated for http://127.0.0.1:63320/node?ref=r%3Af2f39a18-fd23-4090-b7f2-ba8da340eec2%28org.modelix.model.repositoryconcepts.structure%29%2F474657388638618895
 */
public class Module extends BaseConcept implements INamedConcept {

  public class Properties extends BaseConcept.Properties implements INodeHolder, INamedConcept.Properties {

    @NotNull
    @Override
    public INode getINode() {
      return Module.this.getINode();
    }
    @Nullable
    public String getId() {
      String propertyValue = getINode().getPropertyValue("id");
      return propertyValue;
    }
    @Nullable
    public String setId(@Nullable String value) {
      getINode().setPropertyValue("id", value);
      return value;
    }
    @Nullable
    public Integer getModuleVersion() {
      String propertyValue = getINode().getPropertyValue("moduleVersion");
      if (propertyValue != null && !(propertyValue.isEmpty())) {
        return Integer.parseInt(propertyValue);
      }
      return null;
    }
    @Nullable
    public Integer setModuleVersion(Integer value) {
      if (value != null) {
        getINode().setPropertyValue("moduleVersion", Integer.toString(value));
      } else {
        getINode().setPropertyValue("moduleVersion", null);
      }
      return value;
    }
    @Nullable
    public Boolean getCompileInMPS() {
      String propertyValue = getINode().getPropertyValue("compileInMPS");
      if (propertyValue != null && !(propertyValue.isEmpty())) {
        return Boolean.parseBoolean(propertyValue);
      }
      return null;
    }
    @Nullable
    public Boolean setCompileInMPS(@Nullable Boolean value) {
      if (value != null) {
        getINode().setPropertyValue("compileInMPS", Boolean.toString(value));
      } else {
        getINode().setPropertyValue("compileInMPS", null);
      }
      return value;
    }
  }
  public class Children extends BaseConcept.Children implements INodeHolder, INamedConcept.Children {

    @NotNull
    @Override
    public INode getINode() {
      return Module.this.getINode();
    }
    public <T extends ModuleFacet> T createFacets(AbstractConcept<T> concept) {
      INode newChild;
      newChild = getINode().addNewChild("facets", ((int) StreamSupport.stream(getINode().getChildren("facets").spliterator(), false).count()), concept);

      return MPSLanguageRegistry.INSTANCE.getInstance(newChild);
    }
    public <T extends Model> T createModels(AbstractConcept<T> concept) {
      INode newChild;
      newChild = getINode().addNewChild("models", ((int) StreamSupport.stream(getINode().getChildren("models").spliterator(), false).count()), concept);

      return MPSLanguageRegistry.INSTANCE.getInstance(newChild);
    }
    public <T extends ModuleDependency> T createDependencies(AbstractConcept<T> concept) {
      INode newChild;
      newChild = getINode().addNewChild("dependencies", ((int) StreamSupport.stream(getINode().getChildren("dependencies").spliterator(), false).count()), concept);

      return MPSLanguageRegistry.INSTANCE.getInstance(newChild);
    }
    public <T extends LanguageDependency> T createLanguageDependencies(AbstractConcept<T> concept) {
      INode newChild;
      newChild = getINode().addNewChild("languageDependencies", ((int) StreamSupport.stream(getINode().getChildren("languageDependencies").spliterator(), false).count()), concept);

      return MPSLanguageRegistry.INSTANCE.getInstance(newChild);
    }
    @NotNull
    public List<? extends ModuleFacet> getFacets() {
      Iterable<INode> children = getINode().getChildren("facets");
      Stream<INode> stream = StreamSupport.stream(children.spliterator(), false);
      return stream.<ModuleFacet>map(new Function<INode, ModuleFacet>() {
        @Override
        public ModuleFacet apply(INode node) {
          return MPSLanguageRegistry.INSTANCE.getInstance(node);
        }
      }).collect(Collectors.toList());
    }
    @NotNull
    public List<? extends Model> getModels() {
      Iterable<INode> children = getINode().getChildren("models");
      Stream<INode> stream = StreamSupport.stream(children.spliterator(), false);
      return stream.<Model>map(new Function<INode, Model>() {
        @Override
        public Model apply(INode node) {
          return MPSLanguageRegistry.INSTANCE.getInstance(node);
        }
      }).collect(Collectors.toList());
    }
    @NotNull
    public List<? extends ModuleDependency> getDependencies() {
      Iterable<INode> children = getINode().getChildren("dependencies");
      Stream<INode> stream = StreamSupport.stream(children.spliterator(), false);
      return stream.<ModuleDependency>map(new Function<INode, ModuleDependency>() {
        @Override
        public ModuleDependency apply(INode node) {
          return MPSLanguageRegistry.INSTANCE.getInstance(node);
        }
      }).collect(Collectors.toList());
    }
    @NotNull
    public List<? extends LanguageDependency> getLanguageDependencies() {
      Iterable<INode> children = getINode().getChildren("languageDependencies");
      Stream<INode> stream = StreamSupport.stream(children.spliterator(), false);
      return stream.<LanguageDependency>map(new Function<INode, LanguageDependency>() {
        @Override
        public LanguageDependency apply(INode node) {
          return MPSLanguageRegistry.INSTANCE.getInstance(node);
        }
      }).collect(Collectors.toList());
    }
  }
  public class References extends BaseConcept.References implements INodeHolder, INamedConcept.References {

    @NotNull
    @Override
    public INode getINode() {
      return Module.this.getINode();
    }


  }

  private final Properties properties;
  private final Children children;
  private final References references;
  public Module(INode node) {
    super(node);
    this.properties = new Properties();
    this.children = new Children();
    this.references = new References();
  }
  public Properties getProperties() {
    return this.properties;
  }
  public Children getChildren() {
    return this.children;
  }
  public References getReferences() {
    return this.references;
  }
}
