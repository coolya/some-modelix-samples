package org.modelix.model.repositoryconcepts.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import org.modelix.mps.apigen.runtime.INodeHolder;
import org.jetbrains.annotations.NotNull;
import org.modelix.model.api.INode;
import org.jetbrains.annotations.Nullable;

/**
 * Generated for http://127.0.0.1:63320/node?ref=r%3Af2f39a18-fd23-4090-b7f2-ba8da340eec2%28org.modelix.model.repositoryconcepts.structure%29%2F2206727074858242415
 */
public class ModuleDependency extends BaseConcept {

  public class Properties extends BaseConcept.Properties implements INodeHolder {

    @NotNull
    @Override
    public INode getINode() {
      return ModuleDependency.this.getINode();
    }
    @Nullable
    public Boolean getReexport() {
      String propertyValue = getINode().getPropertyValue("reexport");
      if (propertyValue != null && !(propertyValue.isEmpty())) {
        return Boolean.parseBoolean(propertyValue);
      }
      return null;
    }
    @Nullable
    public Boolean setReexport(@Nullable Boolean value) {
      if (value != null) {
        getINode().setPropertyValue("reexport", Boolean.toString(value));
      } else {
        getINode().setPropertyValue("reexport", null);
      }
      return value;
    }
    @Nullable
    public String getUuid() {
      String propertyValue = getINode().getPropertyValue("uuid");
      return propertyValue;
    }
    @Nullable
    public String setUuid(@Nullable String value) {
      getINode().setPropertyValue("uuid", value);
      return value;
    }
    @Nullable
    public String getName() {
      String propertyValue = getINode().getPropertyValue("name");
      return propertyValue;
    }
    @Nullable
    public String setName(@Nullable String value) {
      getINode().setPropertyValue("name", value);
      return value;
    }
    @Nullable
    public Boolean getExplicit() {
      String propertyValue = getINode().getPropertyValue("explicit");
      if (propertyValue != null && !(propertyValue.isEmpty())) {
        return Boolean.parseBoolean(propertyValue);
      }
      return null;
    }
    @Nullable
    public Boolean setExplicit(@Nullable Boolean value) {
      if (value != null) {
        getINode().setPropertyValue("explicit", Boolean.toString(value));
      } else {
        getINode().setPropertyValue("explicit", null);
      }
      return value;
    }
    @Nullable
    public Integer getVersion() {
      String propertyValue = getINode().getPropertyValue("version");
      if (propertyValue != null && !(propertyValue.isEmpty())) {
        return Integer.parseInt(propertyValue);
      }
      return null;
    }
    @Nullable
    public Integer setVersion(Integer value) {
      if (value != null) {
        getINode().setPropertyValue("version", Integer.toString(value));
      } else {
        getINode().setPropertyValue("version", null);
      }
      return value;
    }
    @Nullable
    public String getScope() {
      String propertyValue = getINode().getPropertyValue("scope");
      return propertyValue;
    }
    @Nullable
    public String setScope(@Nullable String value) {
      getINode().setPropertyValue("scope", value);
      return value;
    }
  }
  public class Children extends BaseConcept.Children implements INodeHolder {

    @NotNull
    @Override
    public INode getINode() {
      return ModuleDependency.this.getINode();
    }
  }
  public class References extends BaseConcept.References implements INodeHolder {

    @NotNull
    @Override
    public INode getINode() {
      return ModuleDependency.this.getINode();
    }


  }

  private final Properties properties;
  private final Children children;
  private final References references;
  public ModuleDependency(INode node) {
    super(node);
    this.properties = new Properties();
    this.children = new Children();
    this.references = new References();
  }
  public Properties getProperties() {
    return this.properties;
  }
  public Children getChildren() {
    return this.children;
  }
  public References getReferences() {
    return this.references;
  }
}
