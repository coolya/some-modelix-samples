package org.modelix.model.repositoryconcepts.structure.concepts;

/*Generated by MPS */

import org.modelix.mps.apigen.runtime.AbstractConcept;
import org.modelix.model.repositoryconcepts.structure.ModuleDependency;
import org.jetbrains.annotations.NotNull;
import org.modelix.model.api.INode;
import java.util.HashMap;
import org.modelix.mps.apigen.runtime.MPSProperty;
import org.modelix.mps.apigen.runtime.MPSChildLink;
import org.modelix.mps.apigen.runtime.MPSReferenceLink;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.core.structure.concepts.BaseConceptConcept;

public class ModuleDependencyConcept extends AbstractConcept<ModuleDependency> {

  @NotNull
  @Override
  public ModuleDependency createInstance(@NotNull INode node) {
    return new ModuleDependency(node);
  }
  private final HashMap<String, MPSProperty> properties = new HashMap<String, MPSProperty>();
  private final HashMap<String, MPSChildLink> children = new HashMap<String, MPSChildLink>();
  private final HashMap<String, MPSReferenceLink> references = new HashMap<String, MPSReferenceLink>();
  private final List<AbstractConcept<?>> superConcepts = new ArrayList<AbstractConcept<?>>();
  public static final ModuleDependencyConcept INSTANCE = new ModuleDependencyConcept();
  private ModuleDependencyConcept() {
    super(false, "org.modelix.model.repositoryconcepts.structure.ModuleDependency", "ModuleDependency", "0a7577d1-d4e5-431d-98b1-fae38f9aee80/2206727074858242415");
  }

  @Override
  protected void doInit() {
    this.properties.put("reexport", new MPSProperty(this, "reexport"));
    this.properties.put("uuid", new MPSProperty(this, "uuid"));
    this.properties.put("name", new MPSProperty(this, "name"));
    this.properties.put("explicit", new MPSProperty(this, "explicit"));
    this.properties.put("version", new MPSProperty(this, "version"));
    this.properties.put("scope", new MPSProperty(this, "scope"));
    this.superConcepts.add(BaseConceptConcept.INSTANCE);
  }
  @NotNull
  @Override
  protected HashMap<String, MPSProperty> myProperties() {
    return properties;
  }
  @NotNull
  @Override
  protected HashMap<String, MPSChildLink> myChildLinks() {
    return children;
  }
  @NotNull
  @Override
  protected HashMap<String, MPSReferenceLink> myReferenceLinks() {
    return references;
  }
  @NotNull
  @Override
  protected List<AbstractConcept<?>> mySuperConcepts() {
    return superConcepts;
  }
}
