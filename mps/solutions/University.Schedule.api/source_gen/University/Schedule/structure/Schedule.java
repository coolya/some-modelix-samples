package University.Schedule.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import org.modelix.mps.apigen.runtime.INodeHolder;
import org.jetbrains.annotations.NotNull;
import org.modelix.model.api.INode;
import org.modelix.mps.apigen.runtime.MPSLanguageRegistry;
import org.modelix.mps.apigen.runtime.AbstractConcept;
import java.util.Objects;

/**
 * Generated for http://127.0.0.1:63320/node?ref=r%3Adfa26643-4653-44bc-9dfe-5a6581bcd381%28University.Schedule.structure%29%2F4128798754188010568
 */
public class Schedule extends BaseConcept {

  public class Properties extends BaseConcept.Properties implements INodeHolder {

    @NotNull
    @Override
    public INode getINode() {
      return Schedule.this.getINode();
    }
  }
  public class Children extends BaseConcept.Children implements INodeHolder {

    @NotNull
    @Override
    public INode getINode() {
      return Schedule.this.getINode();
    }
    @NotNull
    public DateAndTime getAt() {
      INode child = getINode().getChildren("at").iterator().next();
      return MPSLanguageRegistry.Companion.getInstance(child);
    }
    public <T extends DateAndTime> T createAt(AbstractConcept<T> concept) {
      INode newChild;
      if (getINode().getChildren("at").iterator().hasNext()) {
        throw new IllegalStateException("child already created!");
      } else {
        newChild = getINode().addNewChild("at", 0, concept);
      }

      return MPSLanguageRegistry.Companion.getInstance(newChild);
    }
    public DateAndTime setAt(@NotNull DateAndTime value) {
      INode storageNode = getINode();
      INode current = storageNode.getChildren("at").iterator().next();
      if (Objects.equals(current, value.getINode())) {
        return value;
      }
      storageNode.removeChild(current);
      storageNode.moveChild("at", 0, value.getINode());
      return value;
    }
  }
  public class References extends BaseConcept.References implements INodeHolder {

    @NotNull
    @Override
    public INode getINode() {
      return Schedule.this.getINode();
    }


  }

  private final Properties properties;
  private final Children children;
  private final References references;
  public Schedule(INode node) {
    super(node);
    this.properties = new Properties();
    this.children = new Children();
    this.references = new References();
  }
  public Properties getProperties() {
    return this.properties;
  }
  public Children getChildren() {
    return this.children;
  }
  public References getReferences() {
    return this.references;
  }
}
