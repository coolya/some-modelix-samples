/**
* University.Schedule.api
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.modelix.sample.restapijsonbulk.models.apis

import University.Schedule.structure.Courses
import University.Schedule.structure.Rooms
import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.locations.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import jetbrains.mps.lang.core.structure.BaseConcept
import kotlinx.serialization.json.JsonPrimitive
import kotlinx.serialization.json.addJsonArray
import kotlinx.serialization.json.addJsonObject
import kotlinx.serialization.json.buildJsonArray
import org.modelix.model.api.INode
import org.modelix.model.api.INodeReference
import org.modelix.model.lazy.INodeReferenceSerializer
import org.modelix.mps.apigen.runtime.MPSLanguageRegistry
import org.modelix.sample.restapijsonbulk.Paths
import org.modelix.sample.restapijsonbulk.logger
import org.modelix.sample.restapijsonbulk.models.Lecture
import org.modelix.sample.restapijsonbulk.models.LectureList
import org.modelix.sample.restapijsonbulk.models.Room
import org.modelix.sample.restapijsonbulk.models.RoomList

fun Route.DefaultApi(loadRoots: suspend () -> List<INode>, resolve: suspend (INodeReference) -> INode?) {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    get<Paths.getLectures> {
        val roots = loadRoots()
        val allLectures = roots.flatMap { (it.allChildren.map { MPSLanguageRegistry.getInstance<BaseConcept>(it) }) }
                .filterIsInstance<Courses>()
                .flatMap { it.children.lectures }

        val roomList = LectureList(lectures = allLectures.map {
            Lecture(name = it.properties.name ?:"",
                    description = it.properties.description?:"",
                    lectureRef = INodeReferenceSerializer.serialize(it.iNode.reference),
                    room = INodeReferenceSerializer.serialize(it.references.room.iNode.reference),
                    maxParticipants = it.properties.maxParticipants?:0)
        })
        call.respond(roomList)
    }

    get<Paths.getLecturesLectureRef> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "name" : "name",
          "description" : "description",
          "lectureRef" : "lectureRef",
          "room" : "room",
          "maxParticipants" : "maxParticipants"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }

    get<Paths.getRooms> {
        val roots = loadRoots()
        val allRooms = roots.flatMap { (it.allChildren.map { MPSLanguageRegistry.getInstance<BaseConcept>(it) }) }
                .filterIsInstance<Rooms>()
                .flatMap { it.children.rooms }

        val roomList = RoomList(rooms = allRooms.map {
            Room(
                name = it.properties.name ?:"",
                maxPlaces = it.properties.maxPlaces?:0,
                roomRef = INodeReferenceSerializer.serialize(it.iNode.reference),
                hasRemoteEquipment = it.properties.hasRemoteEquipment)
        })
        call.respond(roomList)
    }


    get<Paths.getRoomsRoomID> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "maxPlaces" : 0,
          "roomRef" : "roomRef",
          "name" : "name",
          "hasRemoteEquipment" : false
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }

}
